/*
 * Ledgera core API
 * Ledgera servers.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LedgerJournalEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-18T23:32:57.881559-03:00[America/Sao_Paulo]")
public class LedgerJournalEntry {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_SUB_TYPE = "accountSubType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SUB_TYPE)
  private String accountSubType;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_BALANCE_AFTER = "balanceAfter";
  @SerializedName(SERIALIZED_NAME_BALANCE_AFTER)
  private String balanceAfter;

  public static final String SERIALIZED_NAME_BALANCE_TYPE = "balanceType";
  @SerializedName(SERIALIZED_NAME_BALANCE_TYPE)
  private String balanceType;

  public static final String SERIALIZED_NAME_CONCILIATION_ID = "conciliationId";
  @SerializedName(SERIALIZED_NAME_CONCILIATION_ID)
  private String conciliationId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ENTRY_ID = "entryId";
  @SerializedName(SERIALIZED_NAME_ENTRY_ID)
  private String entryId;

  public static final String SERIALIZED_NAME_ENTRY_LABEL = "entryLabel";
  @SerializedName(SERIALIZED_NAME_ENTRY_LABEL)
  private String entryLabel;

  public static final String SERIALIZED_NAME_ENTRY_ORDER = "entryOrder";
  @SerializedName(SERIALIZED_NAME_ENTRY_ORDER)
  private Integer entryOrder;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PROCESS_TYPE = "processType";
  @SerializedName(SERIALIZED_NAME_PROCESS_TYPE)
  private String processType;

  public static final String SERIALIZED_NAME_SEQ_NUM = "seqNum";
  @SerializedName(SERIALIZED_NAME_SEQ_NUM)
  private Integer seqNum;

  public static final String SERIALIZED_NAME_SETTLED_AT = "settledAt";
  @SerializedName(SERIALIZED_NAME_SETTLED_AT)
  private String settledAt;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public LedgerJournalEntry() {
  }

  public LedgerJournalEntry accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public LedgerJournalEntry accountSubType(String accountSubType) {
    
    this.accountSubType = accountSubType;
    return this;
  }

   /**
   * Get accountSubType
   * @return accountSubType
  **/
  @javax.annotation.Nullable

  public String getAccountSubType() {
    return accountSubType;
  }


  public void setAccountSubType(String accountSubType) {
    this.accountSubType = accountSubType;
  }


  public LedgerJournalEntry accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @javax.annotation.Nullable

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public LedgerJournalEntry amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public LedgerJournalEntry balanceAfter(String balanceAfter) {
    
    this.balanceAfter = balanceAfter;
    return this;
  }

   /**
   * Get balanceAfter
   * @return balanceAfter
  **/
  @javax.annotation.Nullable

  public String getBalanceAfter() {
    return balanceAfter;
  }


  public void setBalanceAfter(String balanceAfter) {
    this.balanceAfter = balanceAfter;
  }


  public LedgerJournalEntry balanceType(String balanceType) {
    
    this.balanceType = balanceType;
    return this;
  }

   /**
   * Get balanceType
   * @return balanceType
  **/
  @javax.annotation.Nullable

  public String getBalanceType() {
    return balanceType;
  }


  public void setBalanceType(String balanceType) {
    this.balanceType = balanceType;
  }


  public LedgerJournalEntry conciliationId(String conciliationId) {
    
    this.conciliationId = conciliationId;
    return this;
  }

   /**
   * Get conciliationId
   * @return conciliationId
  **/
  @javax.annotation.Nullable

  public String getConciliationId() {
    return conciliationId;
  }


  public void setConciliationId(String conciliationId) {
    this.conciliationId = conciliationId;
  }


  public LedgerJournalEntry createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LedgerJournalEntry currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public LedgerJournalEntry entryId(String entryId) {
    
    this.entryId = entryId;
    return this;
  }

   /**
   * Get entryId
   * @return entryId
  **/
  @javax.annotation.Nullable

  public String getEntryId() {
    return entryId;
  }


  public void setEntryId(String entryId) {
    this.entryId = entryId;
  }


  public LedgerJournalEntry entryLabel(String entryLabel) {
    
    this.entryLabel = entryLabel;
    return this;
  }

   /**
   * Get entryLabel
   * @return entryLabel
  **/
  @javax.annotation.Nullable

  public String getEntryLabel() {
    return entryLabel;
  }


  public void setEntryLabel(String entryLabel) {
    this.entryLabel = entryLabel;
  }


  public LedgerJournalEntry entryOrder(Integer entryOrder) {
    
    this.entryOrder = entryOrder;
    return this;
  }

   /**
   * Get entryOrder
   * @return entryOrder
  **/
  @javax.annotation.Nullable

  public Integer getEntryOrder() {
    return entryOrder;
  }


  public void setEntryOrder(Integer entryOrder) {
    this.entryOrder = entryOrder;
  }


  public LedgerJournalEntry id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public LedgerJournalEntry metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public LedgerJournalEntry processType(String processType) {
    
    this.processType = processType;
    return this;
  }

   /**
   * Get processType
   * @return processType
  **/
  @javax.annotation.Nullable

  public String getProcessType() {
    return processType;
  }


  public void setProcessType(String processType) {
    this.processType = processType;
  }


  public LedgerJournalEntry seqNum(Integer seqNum) {
    
    this.seqNum = seqNum;
    return this;
  }

   /**
   * Get seqNum
   * @return seqNum
  **/
  @javax.annotation.Nullable

  public Integer getSeqNum() {
    return seqNum;
  }


  public void setSeqNum(Integer seqNum) {
    this.seqNum = seqNum;
  }


  public LedgerJournalEntry settledAt(String settledAt) {
    
    this.settledAt = settledAt;
    return this;
  }

   /**
   * Get settledAt
   * @return settledAt
  **/
  @javax.annotation.Nullable

  public String getSettledAt() {
    return settledAt;
  }


  public void setSettledAt(String settledAt) {
    this.settledAt = settledAt;
  }


  public LedgerJournalEntry transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public LedgerJournalEntry transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nullable

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerJournalEntry ledgerJournalEntry = (LedgerJournalEntry) o;
    return Objects.equals(this.accountId, ledgerJournalEntry.accountId) &&
        Objects.equals(this.accountSubType, ledgerJournalEntry.accountSubType) &&
        Objects.equals(this.accountType, ledgerJournalEntry.accountType) &&
        Objects.equals(this.amount, ledgerJournalEntry.amount) &&
        Objects.equals(this.balanceAfter, ledgerJournalEntry.balanceAfter) &&
        Objects.equals(this.balanceType, ledgerJournalEntry.balanceType) &&
        Objects.equals(this.conciliationId, ledgerJournalEntry.conciliationId) &&
        Objects.equals(this.createdAt, ledgerJournalEntry.createdAt) &&
        Objects.equals(this.currency, ledgerJournalEntry.currency) &&
        Objects.equals(this.entryId, ledgerJournalEntry.entryId) &&
        Objects.equals(this.entryLabel, ledgerJournalEntry.entryLabel) &&
        Objects.equals(this.entryOrder, ledgerJournalEntry.entryOrder) &&
        Objects.equals(this.id, ledgerJournalEntry.id) &&
        Objects.equals(this.metadata, ledgerJournalEntry.metadata) &&
        Objects.equals(this.processType, ledgerJournalEntry.processType) &&
        Objects.equals(this.seqNum, ledgerJournalEntry.seqNum) &&
        Objects.equals(this.settledAt, ledgerJournalEntry.settledAt) &&
        Objects.equals(this.transactionId, ledgerJournalEntry.transactionId) &&
        Objects.equals(this.transactionType, ledgerJournalEntry.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountSubType, accountType, amount, balanceAfter, balanceType, conciliationId, createdAt, currency, entryId, entryLabel, entryOrder, id, metadata, processType, seqNum, settledAt, transactionId, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerJournalEntry {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountSubType: ").append(toIndentedString(accountSubType)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balanceAfter: ").append(toIndentedString(balanceAfter)).append("\n");
    sb.append("    balanceType: ").append(toIndentedString(balanceType)).append("\n");
    sb.append("    conciliationId: ").append(toIndentedString(conciliationId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("    entryLabel: ").append(toIndentedString(entryLabel)).append("\n");
    sb.append("    entryOrder: ").append(toIndentedString(entryOrder)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    processType: ").append(toIndentedString(processType)).append("\n");
    sb.append("    seqNum: ").append(toIndentedString(seqNum)).append("\n");
    sb.append("    settledAt: ").append(toIndentedString(settledAt)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountSubType");
    openapiFields.add("accountType");
    openapiFields.add("amount");
    openapiFields.add("balanceAfter");
    openapiFields.add("balanceType");
    openapiFields.add("conciliationId");
    openapiFields.add("createdAt");
    openapiFields.add("currency");
    openapiFields.add("entryId");
    openapiFields.add("entryLabel");
    openapiFields.add("entryOrder");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("processType");
    openapiFields.add("seqNum");
    openapiFields.add("settledAt");
    openapiFields.add("transactionId");
    openapiFields.add("transactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LedgerJournalEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LedgerJournalEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LedgerJournalEntry is not found in the empty JSON string", LedgerJournalEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LedgerJournalEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LedgerJournalEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("accountSubType") != null && !jsonObj.get("accountSubType").isJsonNull()) && !jsonObj.get("accountSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSubType").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("balanceAfter") != null && !jsonObj.get("balanceAfter").isJsonNull()) && !jsonObj.get("balanceAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balanceAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balanceAfter").toString()));
      }
      if ((jsonObj.get("balanceType") != null && !jsonObj.get("balanceType").isJsonNull()) && !jsonObj.get("balanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balanceType").toString()));
      }
      if ((jsonObj.get("conciliationId") != null && !jsonObj.get("conciliationId").isJsonNull()) && !jsonObj.get("conciliationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conciliationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conciliationId").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("entryId") != null && !jsonObj.get("entryId").isJsonNull()) && !jsonObj.get("entryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryId").toString()));
      }
      if ((jsonObj.get("entryLabel") != null && !jsonObj.get("entryLabel").isJsonNull()) && !jsonObj.get("entryLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryLabel").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("processType") != null && !jsonObj.get("processType").isJsonNull()) && !jsonObj.get("processType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processType").toString()));
      }
      if ((jsonObj.get("settledAt") != null && !jsonObj.get("settledAt").isJsonNull()) && !jsonObj.get("settledAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settledAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settledAt").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LedgerJournalEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LedgerJournalEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LedgerJournalEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LedgerJournalEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<LedgerJournalEntry>() {
           @Override
           public void write(JsonWriter out, LedgerJournalEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LedgerJournalEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LedgerJournalEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LedgerJournalEntry
  * @throws IOException if the JSON string is invalid with respect to LedgerJournalEntry
  */
  public static LedgerJournalEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LedgerJournalEntry.class);
  }

 /**
  * Convert an instance of LedgerJournalEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

