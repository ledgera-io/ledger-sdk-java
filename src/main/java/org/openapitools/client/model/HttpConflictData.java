/*
 * Ledgera core API
 * Ledgera servers.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HttpConflictData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-18T23:32:57.881559-03:00[America/Sao_Paulo]")
public class HttpConflictData {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EXPECTED_AMOUNT = "expectedAmount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AMOUNT)
  private String expectedAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_PROCESS = "transactionProcess";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROCESS)
  private String transactionProcess;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public HttpConflictData() {
  }

  public HttpConflictData accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public HttpConflictData code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public HttpConflictData expectedAmount(String expectedAmount) {
    
    this.expectedAmount = expectedAmount;
    return this;
  }

   /**
   * Get expectedAmount
   * @return expectedAmount
  **/
  @javax.annotation.Nullable

  public String getExpectedAmount() {
    return expectedAmount;
  }


  public void setExpectedAmount(String expectedAmount) {
    this.expectedAmount = expectedAmount;
  }


  public HttpConflictData transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public HttpConflictData transactionProcess(String transactionProcess) {
    
    this.transactionProcess = transactionProcess;
    return this;
  }

   /**
   * Get transactionProcess
   * @return transactionProcess
  **/
  @javax.annotation.Nullable

  public String getTransactionProcess() {
    return transactionProcess;
  }


  public void setTransactionProcess(String transactionProcess) {
    this.transactionProcess = transactionProcess;
  }


  public HttpConflictData transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nullable

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpConflictData httpConflictData = (HttpConflictData) o;
    return Objects.equals(this.accountId, httpConflictData.accountId) &&
        Objects.equals(this.code, httpConflictData.code) &&
        Objects.equals(this.expectedAmount, httpConflictData.expectedAmount) &&
        Objects.equals(this.transactionId, httpConflictData.transactionId) &&
        Objects.equals(this.transactionProcess, httpConflictData.transactionProcess) &&
        Objects.equals(this.transactionType, httpConflictData.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, code, expectedAmount, transactionId, transactionProcess, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpConflictData {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    expectedAmount: ").append(toIndentedString(expectedAmount)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionProcess: ").append(toIndentedString(transactionProcess)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("code");
    openapiFields.add("expectedAmount");
    openapiFields.add("transactionId");
    openapiFields.add("transactionProcess");
    openapiFields.add("transactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HttpConflictData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HttpConflictData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpConflictData is not found in the empty JSON string", HttpConflictData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HttpConflictData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpConflictData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("expectedAmount") != null && !jsonObj.get("expectedAmount").isJsonNull()) && !jsonObj.get("expectedAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedAmount").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("transactionProcess") != null && !jsonObj.get("transactionProcess").isJsonNull()) && !jsonObj.get("transactionProcess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionProcess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionProcess").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpConflictData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpConflictData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpConflictData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpConflictData.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpConflictData>() {
           @Override
           public void write(JsonWriter out, HttpConflictData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpConflictData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HttpConflictData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HttpConflictData
  * @throws IOException if the JSON string is invalid with respect to HttpConflictData
  */
  public static HttpConflictData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpConflictData.class);
  }

 /**
  * Convert an instance of HttpConflictData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

