/*
 * Ledgera core API
 * Ledgera servers.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.AccountPlanBalanceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountPlanCreateAccountPlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-18T23:32:57.881559-03:00[America/Sao_Paulo]")
public class AccountPlanCreateAccountPlan {
  public static final String SERIALIZED_NAME_BALANCE_TYPE = "balanceType";
  @SerializedName(SERIALIZED_NAME_BALANCE_TYPE)
  private AccountPlanBalanceType balanceType;

  public static final String SERIALIZED_NAME_BALANCE_VALIDATION = "balanceValidation";
  @SerializedName(SERIALIZED_NAME_BALANCE_VALIDATION)
  private String balanceValidation;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "isUnique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private Boolean isUnique;

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private String subType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AccountPlanCreateAccountPlan() {
  }

  public AccountPlanCreateAccountPlan balanceType(AccountPlanBalanceType balanceType) {
    
    this.balanceType = balanceType;
    return this;
  }

   /**
   * Get balanceType
   * @return balanceType
  **/
  @javax.annotation.Nonnull

  public AccountPlanBalanceType getBalanceType() {
    return balanceType;
  }


  public void setBalanceType(AccountPlanBalanceType balanceType) {
    this.balanceType = balanceType;
  }


  public AccountPlanCreateAccountPlan balanceValidation(String balanceValidation) {
    
    this.balanceValidation = balanceValidation;
    return this;
  }

   /**
   * Get balanceValidation
   * @return balanceValidation
  **/
  @javax.annotation.Nonnull

  public String getBalanceValidation() {
    return balanceValidation;
  }


  public void setBalanceValidation(String balanceValidation) {
    this.balanceValidation = balanceValidation;
  }


  public AccountPlanCreateAccountPlan isUnique(Boolean isUnique) {
    
    this.isUnique = isUnique;
    return this;
  }

   /**
   * Get isUnique
   * @return isUnique
  **/
  @javax.annotation.Nullable

  public Boolean getIsUnique() {
    return isUnique;
  }


  public void setIsUnique(Boolean isUnique) {
    this.isUnique = isUnique;
  }


  public AccountPlanCreateAccountPlan subType(String subType) {
    
    this.subType = subType;
    return this;
  }

   /**
   * Get subType
   * @return subType
  **/
  @javax.annotation.Nonnull

  public String getSubType() {
    return subType;
  }


  public void setSubType(String subType) {
    this.subType = subType;
  }


  public AccountPlanCreateAccountPlan type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPlanCreateAccountPlan accountPlanCreateAccountPlan = (AccountPlanCreateAccountPlan) o;
    return Objects.equals(this.balanceType, accountPlanCreateAccountPlan.balanceType) &&
        Objects.equals(this.balanceValidation, accountPlanCreateAccountPlan.balanceValidation) &&
        Objects.equals(this.isUnique, accountPlanCreateAccountPlan.isUnique) &&
        Objects.equals(this.subType, accountPlanCreateAccountPlan.subType) &&
        Objects.equals(this.type, accountPlanCreateAccountPlan.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceType, balanceValidation, isUnique, subType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPlanCreateAccountPlan {\n");
    sb.append("    balanceType: ").append(toIndentedString(balanceType)).append("\n");
    sb.append("    balanceValidation: ").append(toIndentedString(balanceValidation)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balanceType");
    openapiFields.add("balanceValidation");
    openapiFields.add("isUnique");
    openapiFields.add("subType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balanceType");
    openapiRequiredFields.add("balanceValidation");
    openapiRequiredFields.add("subType");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountPlanCreateAccountPlan
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountPlanCreateAccountPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountPlanCreateAccountPlan is not found in the empty JSON string", AccountPlanCreateAccountPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AccountPlanCreateAccountPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountPlanCreateAccountPlan` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountPlanCreateAccountPlan.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("balanceValidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balanceValidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balanceValidation").toString()));
      }
      if (!jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountPlanCreateAccountPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountPlanCreateAccountPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountPlanCreateAccountPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountPlanCreateAccountPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountPlanCreateAccountPlan>() {
           @Override
           public void write(JsonWriter out, AccountPlanCreateAccountPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountPlanCreateAccountPlan read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountPlanCreateAccountPlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountPlanCreateAccountPlan
  * @throws IOException if the JSON string is invalid with respect to AccountPlanCreateAccountPlan
  */
  public static AccountPlanCreateAccountPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountPlanCreateAccountPlan.class);
  }

 /**
  * Convert an instance of AccountPlanCreateAccountPlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

