/*
 * Ledgera core API
 * Ledgera servers.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LedgerTransactionParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-18T23:32:57.881559-03:00[America/Sao_Paulo]")
public class LedgerTransactionParams {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PARAM_ACCOUNT1 = "paramAccount1";
  @SerializedName(SERIALIZED_NAME_PARAM_ACCOUNT1)
  private String paramAccount1;

  public static final String SERIALIZED_NAME_PARAM_ACCOUNT2 = "paramAccount2";
  @SerializedName(SERIALIZED_NAME_PARAM_ACCOUNT2)
  private String paramAccount2;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TRANSACTION_PROCESS = "transactionProcess";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PROCESS)
  private String transactionProcess;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private String transactionType;

  public LedgerTransactionParams() {
  }

  public LedgerTransactionParams amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public LedgerTransactionParams currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public LedgerTransactionParams metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public LedgerTransactionParams paramAccount1(String paramAccount1) {
    
    this.paramAccount1 = paramAccount1;
    return this;
  }

   /**
   * Get paramAccount1
   * @return paramAccount1
  **/
  @javax.annotation.Nullable

  public String getParamAccount1() {
    return paramAccount1;
  }


  public void setParamAccount1(String paramAccount1) {
    this.paramAccount1 = paramAccount1;
  }


  public LedgerTransactionParams paramAccount2(String paramAccount2) {
    
    this.paramAccount2 = paramAccount2;
    return this;
  }

   /**
   * Get paramAccount2
   * @return paramAccount2
  **/
  @javax.annotation.Nullable

  public String getParamAccount2() {
    return paramAccount2;
  }


  public void setParamAccount2(String paramAccount2) {
    this.paramAccount2 = paramAccount2;
  }


  public LedgerTransactionParams transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nonnull

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public LedgerTransactionParams transactionProcess(String transactionProcess) {
    
    this.transactionProcess = transactionProcess;
    return this;
  }

   /**
   * Get transactionProcess
   * @return transactionProcess
  **/
  @javax.annotation.Nonnull

  public String getTransactionProcess() {
    return transactionProcess;
  }


  public void setTransactionProcess(String transactionProcess) {
    this.transactionProcess = transactionProcess;
  }


  public LedgerTransactionParams transactionType(String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @javax.annotation.Nonnull

  public String getTransactionType() {
    return transactionType;
  }


  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerTransactionParams ledgerTransactionParams = (LedgerTransactionParams) o;
    return Objects.equals(this.amount, ledgerTransactionParams.amount) &&
        Objects.equals(this.currency, ledgerTransactionParams.currency) &&
        Objects.equals(this.metadata, ledgerTransactionParams.metadata) &&
        Objects.equals(this.paramAccount1, ledgerTransactionParams.paramAccount1) &&
        Objects.equals(this.paramAccount2, ledgerTransactionParams.paramAccount2) &&
        Objects.equals(this.transactionId, ledgerTransactionParams.transactionId) &&
        Objects.equals(this.transactionProcess, ledgerTransactionParams.transactionProcess) &&
        Objects.equals(this.transactionType, ledgerTransactionParams.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, metadata, paramAccount1, paramAccount2, transactionId, transactionProcess, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerTransactionParams {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    paramAccount1: ").append(toIndentedString(paramAccount1)).append("\n");
    sb.append("    paramAccount2: ").append(toIndentedString(paramAccount2)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionProcess: ").append(toIndentedString(transactionProcess)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("metadata");
    openapiFields.add("paramAccount1");
    openapiFields.add("paramAccount2");
    openapiFields.add("transactionId");
    openapiFields.add("transactionProcess");
    openapiFields.add("transactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("transactionProcess");
    openapiRequiredFields.add("transactionType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LedgerTransactionParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LedgerTransactionParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LedgerTransactionParams is not found in the empty JSON string", LedgerTransactionParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LedgerTransactionParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LedgerTransactionParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LedgerTransactionParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("paramAccount1") != null && !jsonObj.get("paramAccount1").isJsonNull()) && !jsonObj.get("paramAccount1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramAccount1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramAccount1").toString()));
      }
      if ((jsonObj.get("paramAccount2") != null && !jsonObj.get("paramAccount2").isJsonNull()) && !jsonObj.get("paramAccount2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramAccount2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramAccount2").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("transactionProcess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionProcess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionProcess").toString()));
      }
      if (!jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LedgerTransactionParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LedgerTransactionParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LedgerTransactionParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LedgerTransactionParams.class));

       return (TypeAdapter<T>) new TypeAdapter<LedgerTransactionParams>() {
           @Override
           public void write(JsonWriter out, LedgerTransactionParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LedgerTransactionParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LedgerTransactionParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LedgerTransactionParams
  * @throws IOException if the JSON string is invalid with respect to LedgerTransactionParams
  */
  public static LedgerTransactionParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LedgerTransactionParams.class);
  }

 /**
  * Convert an instance of LedgerTransactionParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

