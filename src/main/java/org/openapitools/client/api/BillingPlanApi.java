/*
 * Ledgera core API
 * Ledgera servers.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillingBillingPlan;
import org.openapitools.client.model.BillingCreateBilling;
import org.openapitools.client.model.BillingCreateBulkBilling;
import org.openapitools.client.model.ExceptionEntityNotFound;
import org.openapitools.client.model.HttpHttpUnprocessableEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BillingPlanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingPlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1BillingBillingPlanIdGet
     * @param billingPlanId Billing plan ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBillingPlanIdGetCall(String billingPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/billing/{billingPlanId}"
            .replace("{" + "billingPlanId" + "}", localVarApiClient.escapeString(billingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1BillingBillingPlanIdGetValidateBeforeCall(String billingPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingPlanId' is set
        if (billingPlanId == null) {
            throw new ApiException("Missing the required parameter 'billingPlanId' when calling v1BillingBillingPlanIdGet(Async)");
        }

        return v1BillingBillingPlanIdGetCall(billingPlanId, _callback);

    }

    /**
     * Get billing plan by ID
     * Get billing plan by ID
     * @param billingPlanId Billing plan ID (required)
     * @return BillingBillingPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public BillingBillingPlan v1BillingBillingPlanIdGet(String billingPlanId) throws ApiException {
        ApiResponse<BillingBillingPlan> localVarResp = v1BillingBillingPlanIdGetWithHttpInfo(billingPlanId);
        return localVarResp.getData();
    }

    /**
     * Get billing plan by ID
     * Get billing plan by ID
     * @param billingPlanId Billing plan ID (required)
     * @return ApiResponse&lt;BillingBillingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingBillingPlan> v1BillingBillingPlanIdGetWithHttpInfo(String billingPlanId) throws ApiException {
        okhttp3.Call localVarCall = v1BillingBillingPlanIdGetValidateBeforeCall(billingPlanId, null);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get billing plan by ID (asynchronously)
     * Get billing plan by ID
     * @param billingPlanId Billing plan ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBillingPlanIdGetAsync(String billingPlanId, final ApiCallback<BillingBillingPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1BillingBillingPlanIdGetValidateBeforeCall(billingPlanId, _callback);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1BillingBillingPlanIdPut
     * @param billingPlanId Billing plan ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBillingPlanIdPutCall(String billingPlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/billing/{billingPlanId}"
            .replace("{" + "billingPlanId" + "}", localVarApiClient.escapeString(billingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1BillingBillingPlanIdPutValidateBeforeCall(String billingPlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingPlanId' is set
        if (billingPlanId == null) {
            throw new ApiException("Missing the required parameter 'billingPlanId' when calling v1BillingBillingPlanIdPut(Async)");
        }

        return v1BillingBillingPlanIdPutCall(billingPlanId, _callback);

    }

    /**
     * Update billing plan
     * Update billing plan
     * @param billingPlanId Billing plan ID (required)
     * @return BillingBillingPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public BillingBillingPlan v1BillingBillingPlanIdPut(String billingPlanId) throws ApiException {
        ApiResponse<BillingBillingPlan> localVarResp = v1BillingBillingPlanIdPutWithHttpInfo(billingPlanId);
        return localVarResp.getData();
    }

    /**
     * Update billing plan
     * Update billing plan
     * @param billingPlanId Billing plan ID (required)
     * @return ApiResponse&lt;BillingBillingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingBillingPlan> v1BillingBillingPlanIdPutWithHttpInfo(String billingPlanId) throws ApiException {
        okhttp3.Call localVarCall = v1BillingBillingPlanIdPutValidateBeforeCall(billingPlanId, null);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update billing plan (asynchronously)
     * Update billing plan
     * @param billingPlanId Billing plan ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> billing plan not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBillingPlanIdPutAsync(String billingPlanId, final ApiCallback<BillingBillingPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1BillingBillingPlanIdPutValidateBeforeCall(billingPlanId, _callback);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1BillingBulkPost
     * @param currency Billing JSON (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBulkPostCall(BillingCreateBulkBilling currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currency;

        // create path and map variables
        String localVarPath = "/v1/billing/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1BillingBulkPostValidateBeforeCall(BillingCreateBulkBilling currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling v1BillingBulkPost(Async)");
        }

        return v1BillingBulkPostCall(currency, _callback);

    }

    /**
     * Create billing plan
     * Create billing plan
     * @param currency Billing JSON (required)
     * @return List&lt;BillingBillingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public List<BillingBillingPlan> v1BillingBulkPost(BillingCreateBulkBilling currency) throws ApiException {
        ApiResponse<List<BillingBillingPlan>> localVarResp = v1BillingBulkPostWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Create billing plan
     * Create billing plan
     * @param currency Billing JSON (required)
     * @return ApiResponse&lt;List&lt;BillingBillingPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BillingBillingPlan>> v1BillingBulkPostWithHttpInfo(BillingCreateBulkBilling currency) throws ApiException {
        okhttp3.Call localVarCall = v1BillingBulkPostValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<List<BillingBillingPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create billing plan (asynchronously)
     * Create billing plan
     * @param currency Billing JSON (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingBulkPostAsync(BillingCreateBulkBilling currency, final ApiCallback<List<BillingBillingPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1BillingBulkPostValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<List<BillingBillingPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1BillingGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/billing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1BillingGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1BillingGetCall(_callback);

    }

    /**
     * List billing
     * List billing
     * @return List&lt;BillingBillingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BillingBillingPlan> v1BillingGet() throws ApiException {
        ApiResponse<List<BillingBillingPlan>> localVarResp = v1BillingGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List billing
     * List billing
     * @return ApiResponse&lt;List&lt;BillingBillingPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BillingBillingPlan>> v1BillingGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1BillingGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<BillingBillingPlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List billing (asynchronously)
     * List billing
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingGetAsync(final ApiCallback<List<BillingBillingPlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1BillingGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<BillingBillingPlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1BillingPost
     * @param currency Billing JSON (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingPostCall(BillingCreateBilling currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currency;

        // create path and map variables
        String localVarPath = "/v1/billing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1BillingPostValidateBeforeCall(BillingCreateBilling currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling v1BillingPost(Async)");
        }

        return v1BillingPostCall(currency, _callback);

    }

    /**
     * Create billing plan
     * Create billing plan
     * @param currency Billing JSON (required)
     * @return BillingBillingPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public BillingBillingPlan v1BillingPost(BillingCreateBilling currency) throws ApiException {
        ApiResponse<BillingBillingPlan> localVarResp = v1BillingPostWithHttpInfo(currency);
        return localVarResp.getData();
    }

    /**
     * Create billing plan
     * Create billing plan
     * @param currency Billing JSON (required)
     * @return ApiResponse&lt;BillingBillingPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingBillingPlan> v1BillingPostWithHttpInfo(BillingCreateBilling currency) throws ApiException {
        okhttp3.Call localVarCall = v1BillingPostValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create billing plan (asynchronously)
     * Create billing plan
     * @param currency Billing JSON (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> validation error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1BillingPostAsync(BillingCreateBilling currency, final ApiCallback<BillingBillingPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1BillingPostValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<BillingBillingPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
